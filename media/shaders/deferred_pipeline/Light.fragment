#version 430

struct Light
{
	vec4 positionAndRadius;
	vec4 color;
};

layout(binding = 0) uniform sampler2D u_GBufferTexture0;
layout(binding = 1) uniform sampler2D u_GBufferTexture1;
layout(binding = 2) uniform sampler2D u_GBufferTexture2;
layout(binding = 3) uniform sampler2D u_DepthTexture;

uniform ivec2 u_ScreenSize;
uniform Light u_Light;
uniform vec3 u_CameraPosition = vec3(0.0, 0.0, -2.0);

layout (location = 0) out vec4 out_Color;

void main()
{
	vec2 uv = gl_FragCoord.xy / u_ScreenSize;
	vec3 color = vec3(0.0);

	vec3 normal = texture(u_GBufferTexture1, uv).rgb;
	vec4 fragmentPosition = vec4(texture(u_GBufferTexture2, uv).rgb, 1.0);

	vec3 viewDirection = normalize(u_CameraPosition - fragmentPosition.xyz);
	
	vec3 lightDirection = u_Light.positionAndRadius.xyz - fragmentPosition.xyz;
	float lightAttenuation = 1.0 - smoothstep(u_Light.positionAndRadius.w * 0.75, u_Light.positionAndRadius.w, length(lightDirection));
	lightDirection = normalize(lightDirection);

	float normalDotLightDirection = max(dot(normal, lightDirection), 0.0);
	vec3 halfwayVector = normalize(lightDirection + viewDirection);
	float normalDotHalfwayVector = dot(normal, halfwayVector);

	vec3 diffuse = normalDotLightDirection * u_Light.color.rgb * vec3(0.5);
	vec3 specular = pow(max(normalDotHalfwayVector, 0.0), 32.0) * vec3(0.3);

	diffuse *= lightAttenuation;
	specular *= lightAttenuation;

	out_Color = vec4(diffuse + specular, 1.0);
}