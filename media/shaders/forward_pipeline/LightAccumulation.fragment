#version 430

in vec4 v_FragmentPosition;
in vec3 v_Normal;

struct Light
{
	vec4 positionAndRadius;
	vec4 color;
};

layout (binding = 2, std430) readonly buffer LightsBuffer
{
    Light lights[];
};

uniform vec3 u_CameraPosition = vec3(0.0, 0.0, -2.0);

layout (location = 0) out vec4 out_Color;

void main()
{
	vec3 color = vec3(0.0);

	vec3 viewDirection = normalize(u_CameraPosition - v_FragmentPosition.xyz);

	for (int i = 0; i < lights.length(); ++i)
	{
		Light light = lights[i];
		
		vec3 lightDirection = light.positionAndRadius.xyz - v_FragmentPosition.xyz;
		float lightAttenuation = 1.0 - smoothstep(light.positionAndRadius.w * 0.75, light.positionAndRadius.w, length(lightDirection));
		lightDirection = normalize(lightDirection);
		
		float normalDotLightDirection = max(dot(v_Normal, lightDirection), 0.0);
		vec3 halfwayVector = normalize(lightDirection + viewDirection);
		float normalDotHalfwayVector = dot(v_Normal, halfwayVector);
		
		vec3 diffuse = normalDotLightDirection * light.color.rgb;
		vec3 specular = pow(max(normalDotHalfwayVector, 0.0), 32.0) * vec3(0.3);

		diffuse *= lightAttenuation;
		specular *= lightAttenuation;

		color.rgb += diffuse + specular;
	}
	
	vec3 ambient = vec3(0.1);
	out_Color = vec4(color + ambient, 1.0);
}