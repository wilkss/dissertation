// Light culling algorithm based on: http://www.dice.se/news/directx-11-rendering-battlefield-3/

#version 430

#define VISIBLE_LIGHT_INDICES_BUFFER_GUARD -1
#define MAX_LIGHTS_PER_TILE 1024
#define BLOCK_SIZE 32

struct Light
{
	vec4 positionAndRadius;
	vec4 color;
};

layout(std430, binding = 2) readonly buffer LightsBuffer
{
	Light lights[];
};

layout(std430, binding = 3) writeonly buffer VisibleLightIndicesBuffer
{
	uint visibleLightIndices[];
};

layout(binding = 0) uniform sampler2D u_DepthTexture;
uniform mat4 u_ViewMatrix;
uniform mat4 u_ProjectionMatrix;
uniform mat4 u_InverseProjectionMatrix;
uniform mat4 u_ViewProjectionMatrix;
uniform ivec2 u_ScreenSize;

uniform float u_Near = 0.1;
uniform float u_Far = 1024.0;

shared uint s_MinDepthInt;
shared uint s_MaxDepthInt;
shared uint s_VisibleLightCount;
shared uint s_VisibleLightIndices[MAX_LIGHTS_PER_TILE];
shared vec4 s_FrustumPlanes[6];

layout(local_size_x = BLOCK_SIZE, local_size_y = BLOCK_SIZE, local_size_z = 1) in;
void main()
{
	if (gl_LocalInvocationIndex == 0)
	{
		s_VisibleLightCount = 0;

		s_MinDepthInt = 0xFFFFFFFF;
		s_MaxDepthInt = 0;
	}

	barrier();

	float depth = texture(u_DepthTexture, vec2(gl_GlobalInvocationID.xy) / vec2(u_ScreenSize.xy - ivec2(1, 1))).r;
	depth = 2.0 * u_Near * u_Far / (u_Far + u_Near - (2.0 * depth - 1.0) * (u_Far - u_Near));
	uint depthInt = floatBitsToUint(depth);

	barrier();

	atomicMin(s_MinDepthInt, depthInt);
	atomicMax(s_MaxDepthInt, depthInt);

	barrier();

	float minGroupDepth = uintBitsToFloat(s_MinDepthInt);
	float maxGroupDepth = uintBitsToFloat(s_MaxDepthInt);

	vec2 tileScale = vec2(u_ScreenSize.xy) / float(BLOCK_SIZE * 2);
	vec2 tileBias = tileScale - vec2(gl_WorkGroupID.xy);

	s_FrustumPlanes[0] = vec4(u_ProjectionMatrix[0][0] * tileScale.x, 0.0, -1.0 - tileBias.x, 0.0);
	s_FrustumPlanes[1] = vec4(-u_ProjectionMatrix[0][0] * tileScale.x, 0.0, -1.0 + tileBias.x, 0.0);
	s_FrustumPlanes[2] = vec4(0.0, u_ProjectionMatrix[1][1] * tileScale.y, -1.0 - tileBias.y, 0.0);
	s_FrustumPlanes[3] = vec4(0.0, -u_ProjectionMatrix[1][1] * tileScale.y, -1.0 + tileBias.y, 0.0);
	s_FrustumPlanes[4] = vec4(0.0, 0.0, -1.0, -minGroupDepth);
	s_FrustumPlanes[5] = vec4(0.0, 0.0, 1.0, maxGroupDepth);

	for (uint i = 0; i < 4; ++i)
		s_FrustumPlanes[i] /= length(s_FrustumPlanes[i].xyz);

	barrier();

	uint threadCount = BLOCK_SIZE * BLOCK_SIZE;
	uint passCount = (lights.length() + threadCount - 1) / threadCount;

	for (uint i = 0; i < passCount; ++i)
	{
		uint lightIndex = i * threadCount + gl_LocalInvocationIndex;
		if (lightIndex >= lights.length())
			break;

		Light light = lights[lightIndex];
		vec3 center = (u_ViewMatrix * vec4(light.positionAndRadius.xyz, 1.0)).xyz;

		bool intersection = true;
		for (uint j = 0; j < 6; j++)
		{
			float d = dot(vec4(center, 1.0), s_FrustumPlanes[j]);
			if (d <= -light.positionAndRadius.w)
			{
				intersection = false;
				break;
			}
		}

		if (intersection)
		{
			uint offset = atomicAdd(s_VisibleLightCount, 1);
			s_VisibleLightIndices[offset] = lightIndex;
		}
	}

	barrier();

	if (gl_LocalInvocationIndex == 0)
	{
		uint tileIndex = gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x;
		uint startOffset = MAX_LIGHTS_PER_TILE * tileIndex;

		for (uint i = 0; i < s_VisibleLightCount; i++)
			visibleLightIndices[startOffset + i] = s_VisibleLightIndices[i];

		visibleLightIndices[startOffset + s_VisibleLightCount] = VISIBLE_LIGHT_INDICES_BUFFER_GUARD;
	}
}